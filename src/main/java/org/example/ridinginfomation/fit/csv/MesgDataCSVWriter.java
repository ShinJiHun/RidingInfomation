/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////


package org.example.ridinginfomation.fit.csv;

import org.example.ridinginfomation.fit.DeveloperField;
import org.example.ridinginfomation.fit.Field;
import org.example.ridinginfomation.fit.Fit;
import org.example.ridinginfomation.fit.Mesg;
import org.example.ridinginfomation.fit.MesgListener;

import java.io.ByteArrayOutputStream;

public class MesgDataCSVWriter extends MesgCSVWriterBase implements MesgListener {

    public MesgDataCSVWriter(ByteArrayOutputStream byteArrayOutputStream) {
        super(byteArrayOutputStream);
    }

    public void onMesg(Mesg mesg) {
        if (mesg.getName().equals("unknown") && hideUnknownData) {
            return;
        }

        if (removeExpandedFields) {
            mesg.removeExpandedFields();
        }

        if (preserveGaps) {
            clearMesgFields(mesg);
        }

        for (Field field : mesg.getFields()) {
            if (hideUnknownData && field.getName().equals("unknown")) {
                continue;
            }

            int subFieldIndex = mesg.getActiveSubFieldIndex(field.getNum());

            String value = null;

            if (null == value) {
                value = getValueString(field, subFieldIndex);
            }

            String headerString = mesg.getName() + "." + field.getName(subFieldIndex);


            String units = formatUnits(field.getUnits(subFieldIndex), field.getProfileType().name());
            if (!units.isEmpty()) {
                headerString += "[" + units + "]";
            }

            csv.set(headerString, value);
        }

        for (DeveloperField field : mesg.getDeveloperFields()) {
            if (!field.isDefined() && hideUnknownData) {
                continue;
            }

            String value = getValueString(field, Fit.SUBFIELD_INDEX_MAIN_FIELD);
            String headerString = mesg.getName() + ".developer." + field.getDeveloperDataIndex() + "." + field.getName();

            String units = formatUnits(field.getUnits());
            if (units != null && !units.isEmpty()) {
                headerString += "[" + units + "]";
            }

            csv.set(headerString, value);
        }

        csv.writeln();
    }

    public void setMaxNumFields(int numFields) {
        csv.setMaxNumberValues(numFields);
    }

    public void clearMesgFields(Mesg mesg) {
        String mesgName = mesg.getName();

        for (String header : csv.getHeaders()) {
            String headerName = header.substring(0, header.indexOf("."));

            if (headerName.equals(mesgName)) {
                csv.set(header, "");
            }
        }
    }
}